/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointUpdate;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedEndpoints;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechEndpointsApi
 */
@Disabled
public class CustomSpeechEndpointsApiTest {

    private final CustomSpeechEndpointsApi api = new CustomSpeechEndpointsApi();

    /**
     * Creates a new endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsCreateTest() throws ApiException {
        Endpoint endpoint = null;
        Endpoint response = api.endpointsCreate(endpoint);
        // TODO: test validations
    }

    /**
     * Deletes the endpoint identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteTest() throws ApiException {
        UUID id = null;
        api.endpointsDelete(id);
        // TODO: test validations
    }

    /**
     * Deletes one audio or transcription log that have been stored when using the default base model of a given language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteBaseModelLogTest() throws ApiException {
        String locale = null;
        String logId = null;
        api.endpointsDeleteBaseModelLog(locale, logId);
        // TODO: test validations
    }

    /**
     * Deletes the specified audio and transcription logs that have been stored when using the default base model of a given language. It deletes all logs before (and including) a specific day.
     *
     * Deletion process is done asynchronously and can take up to one day depending on the amount of log files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteBaseModelLogsTest() throws ApiException {
        String locale = null;
        String endDate = null;
        api.endpointsDeleteBaseModelLogs(locale, endDate);
        // TODO: test validations
    }

    /**
     * Deletes one audio or transcription log that have been stored for a given endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteLogTest() throws ApiException {
        UUID id = null;
        String logId = null;
        api.endpointsDeleteLog(id, logId);
        // TODO: test validations
    }

    /**
     * Deletes the specified audio and transcription logs that have been stored for a given endpoint. It deletes all logs before (and including) a specific day.
     *
     * The deletion process is done asynchronously and can take up to one day depending on the amount of log files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsDeleteLogsTest() throws ApiException {
        UUID id = null;
        String endDate = null;
        api.endpointsDeleteLogs(id, endDate);
        // TODO: test validations
    }

    /**
     * Gets the endpoint identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsGetTest() throws ApiException {
        UUID id = null;
        Endpoint response = api.endpointsGet(id);
        // TODO: test validations
    }

    /**
     * Gets a specific audio or transcription log for the default base model in a given language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsGetBaseModelLogTest() throws ApiException {
        String locale = null;
        String logId = null;
        Integer sasValidityInSeconds = null;
        ModelFile response = api.endpointsGetBaseModelLog(locale, logId, sasValidityInSeconds);
        // TODO: test validations
    }

    /**
     * Gets a specific audio or transcription log for a given endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsGetLogTest() throws ApiException {
        UUID id = null;
        String logId = null;
        Integer sasValidityInSeconds = null;
        ModelFile response = api.endpointsGetLog(id, logId, sasValidityInSeconds);
        // TODO: test validations
    }

    /**
     * Gets the list of endpoints for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedEndpoints response = api.endpointsList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of audio and transcription logs that have been stored when using the default base model of a given language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsListBaseModelLogsTest() throws ApiException {
        String locale = null;
        Integer sasValidityInSeconds = null;
        String skipToken = null;
        Integer top = null;
        PaginatedFiles response = api.endpointsListBaseModelLogs(locale, sasValidityInSeconds, skipToken, top);
        // TODO: test validations
    }

    /**
     * Gets the list of audio and transcription logs that have been stored for a given endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsListLogsTest() throws ApiException {
        UUID id = null;
        Integer sasValidityInSeconds = null;
        String skipToken = null;
        Integer top = null;
        PaginatedFiles response = api.endpointsListLogs(id, sasValidityInSeconds, skipToken, top);
        // TODO: test validations
    }

    /**
     * Gets a list of supported locales for endpoint creations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsListSupportedLocalesTest() throws ApiException {
        List<String> response = api.endpointsListSupportedLocales();
        // TODO: test validations
    }

    /**
     * Updates the metadata of the endpoint identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endpointsUpdateTest() throws ApiException {
        UUID id = null;
        EndpointUpdate endpointUpdate = null;
        Endpoint response = api.endpointsUpdate(id, endpointUpdate);
        // TODO: test validations
    }

}
