/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedWebHooks;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.WebHook;
import org.openapitools.client.model.WebHookUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechWebHooksApi
 */
@Disabled
public class CustomSpeechWebHooksApiTest {

    private final CustomSpeechWebHooksApi api = new CustomSpeechWebHooksApi();

    /**
     * Creates a new web hook.
     *
     * If the property secret in the configuration is present and contains a non-empty string, it will be used to create a SHA256 hash of the payload with  the secret as HMAC key. This hash will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.                When calling back into the registered URL, the request will contain a X-MicrosoftSpeechServices-Event header containing one of the registered event  types. There will be one request per registered event type.                After successfully registering the web hook, it will not be usable until a challenge/response is completed. To do this, a request with the event type  challenge will be made with a query parameter called validationToken. Respond to the challenge with a 200 OK containing the value of the validationToken  query parameter as the response body. When the challenge/response is successfully completed, the web hook will begin receiving events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksCreateTest() throws ApiException {
        WebHook webHook = null;
        WebHook response = api.webHooksCreate(webHook);
        // TODO: test validations
    }

    /**
     * Deletes the web hook identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksDeleteTest() throws ApiException {
        UUID id = null;
        api.webHooksDelete(id);
        // TODO: test validations
    }

    /**
     * Gets the web hook identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksGetTest() throws ApiException {
        UUID id = null;
        WebHook response = api.webHooksGet(id);
        // TODO: test validations
    }

    /**
     * Gets the list of web hooks for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedWebHooks response = api.webHooksList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Sends a ping event to the registered URL.
     *
     * The request body of the POST request sent to the registered web hook URL is of the same shape as in the GET request for a specific hook.  The Swagger Schema ID of the model is WebHookV3.                The request will contain a X-MicrosoftSpeechServices-Event header with the value ping. If the web hook was registered with  a secret it will contain a X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the payload with  the secret as HMAC key. The hash is base64 encoded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksPingTest() throws ApiException {
        UUID id = null;
        api.webHooksPing(id);
        // TODO: test validations
    }

    /**
     * Sends a request for each registered event type to the registered URL.
     *
     * The payload will be generated from the last entity that would have invoked the web hook. If no entity is present for none of the registered event types,  the POST will respond with 204. If a test request can be made, it will respond with 200.  The request will contain a X-MicrosoftSpeechServices-Event header with the respective registered event type.  If the web hook was registered with a secret it will contain a X-MicrosoftSpeechServices-Signature header with an SHA256 hash of the payload with  the secret as HMAC key. The hash is base64 encoded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksTestTest() throws ApiException {
        UUID id = null;
        api.webHooksTest(id);
        // TODO: test validations
    }

    /**
     * Updates the web hook identified by the given ID.
     *
     * If the property secret in the configuration is omitted or contains an empty string, future callbacks won&#39;t contain X-MicrosoftSpeechServices-Signature  headers. If the property contains a non-empty string, it will be used to create a SHA256 hash of the payload with the secret as HMAC key. This hash  will be set as X-MicrosoftSpeechServices-Signature header when calling back into the registered URL.                If the URL changes,  the web hook will stop receiving events until a  challenge/response is completed. To do this, a request with the event type challenge will be made with a query parameter called validationToken.  Respond to the challenge with a 200 OK containing the value of the validationToken query parameter as the response body. When the challenge/response  is successfully completed, the web hook will begin receiving events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webHooksUpdateTest() throws ApiException {
        UUID id = null;
        WebHookUpdate webHookUpdate = null;
        WebHook response = api.webHooksUpdate(id, webHookUpdate);
        // TODO: test validations
    }

}
