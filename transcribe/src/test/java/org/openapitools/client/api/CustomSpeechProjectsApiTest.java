/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedCustomModels;
import org.openapitools.client.model.PaginatedDatasets;
import org.openapitools.client.model.PaginatedEndpoints;
import org.openapitools.client.model.PaginatedEvaluations;
import org.openapitools.client.model.PaginatedProjects;
import org.openapitools.client.model.PaginatedTranscriptions;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectUpdate;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechProjectsApi
 */
@Disabled
public class CustomSpeechProjectsApiTest {

    private final CustomSpeechProjectsApi api = new CustomSpeechProjectsApi();

    /**
     * Creates a new project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateTest() throws ApiException {
        Project project = null;
        Project response = api.projectsCreate(project);
        // TODO: test validations
    }

    /**
     * Deletes the project identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteTest() throws ApiException {
        UUID id = null;
        api.projectsDelete(id);
        // TODO: test validations
    }

    /**
     * Gets the project identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        UUID id = null;
        Project response = api.projectsGet(id);
        // TODO: test validations
    }

    /**
     * Gets the list of projects for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedProjects response = api.projectsList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of datasets for specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListDatasetsTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedDatasets response = api.projectsListDatasets(id, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of endpoints for specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListEndpointsTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedEndpoints response = api.projectsListEndpoints(id, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of evaluations for specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListEvaluationsTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedEvaluations response = api.projectsListEvaluations(id, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of models for specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListModelsTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedCustomModels response = api.projectsListModels(id, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the list of supported locales.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListSupportedLocalesTest() throws ApiException {
        List<String> response = api.projectsListSupportedLocales();
        // TODO: test validations
    }

    /**
     * Gets the list of transcriptions for specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTranscriptionsTest() throws ApiException {
        UUID id = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedTranscriptions response = api.projectsListTranscriptions(id, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Updates the project identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateTest() throws ApiException {
        UUID id = null;
        ProjectUpdate projectUpdate = null;
        Project response = api.projectsUpdate(id, projectUpdate);
        // TODO: test validations
    }

}
