/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommitBlocksEntry;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.DatasetKind;
import org.openapitools.client.model.DatasetUpdate;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedDatasets;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.UploadedBlocks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechDatasetsForModelAdaptationApi
 */
@Disabled
public class CustomSpeechDatasetsForModelAdaptationApiTest {

    private final CustomSpeechDatasetsForModelAdaptationApi api = new CustomSpeechDatasetsForModelAdaptationApi();

    /**
     * Commit block list to complete the upload of the dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsCommitBlocksTest() throws ApiException {
        UUID id = null;
        List<CommitBlocksEntry> blockList = null;
        api.datasetsCommitBlocks(id, blockList);
        // TODO: test validations
    }

    /**
     * Uploads and creates a new dataset by getting the data from a specified URL or starts waiting for data blocks to be uploaded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsCreateTest() throws ApiException {
        Dataset dataset = null;
        Dataset response = api.datasetsCreate(dataset);
        // TODO: test validations
    }

    /**
     * Deletes the specified dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsDeleteTest() throws ApiException {
        UUID id = null;
        api.datasetsDelete(id);
        // TODO: test validations
    }

    /**
     * Gets the dataset identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsGetTest() throws ApiException {
        UUID id = null;
        Dataset response = api.datasetsGet(id);
        // TODO: test validations
    }

    /**
     * Gets the list of uploaded blocks for this dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsGetBlocksTest() throws ApiException {
        UUID id = null;
        UploadedBlocks response = api.datasetsGetBlocks(id);
        // TODO: test validations
    }

    /**
     * Gets one specific file (identified with fileId) from a dataset (identified with id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsGetFileTest() throws ApiException {
        UUID id = null;
        UUID fileId = null;
        Integer sasValidityInSeconds = null;
        ModelFile response = api.datasetsGetFile(id, fileId, sasValidityInSeconds);
        // TODO: test validations
    }

    /**
     * Gets a list of datasets for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedDatasets response = api.datasetsList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the files of the dataset identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsListFilesTest() throws ApiException {
        UUID id = null;
        Integer sasValidityInSeconds = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedFiles response = api.datasetsListFiles(id, sasValidityInSeconds, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets a list of supported locales for datasets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsListSupportedLocalesTest() throws ApiException {
        Map<String, List<DatasetKind>> response = api.datasetsListSupportedLocales();
        // TODO: test validations
    }

    /**
     * Updates the mutable details of the dataset identified by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsUpdateTest() throws ApiException {
        UUID id = null;
        DatasetUpdate datasetUpdate = null;
        Dataset response = api.datasetsUpdate(id, datasetUpdate);
        // TODO: test validations
    }

    /**
     * Uploads data and creates a new dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsUploadTest() throws ApiException {
        String displayName = null;
        String locale = null;
        String kind = null;
        String project = null;
        String description = null;
        String customProperties = null;
        File data = null;
        String email = null;
        Dataset response = api.datasetsUpload(displayName, locale, kind, project, description, customProperties, data, email);
        // TODO: test validations
    }

    /**
     * Upload a block of data for the dataset. The maximum size of the block is 8MiB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datasetsUploadBlockTest() throws ApiException {
        UUID id = null;
        String blockid = null;
        File body = null;
        api.datasetsUploadBlock(id, blockid, body);
        // TODO: test validations
    }

}
