/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Evaluation;
import org.openapitools.client.model.EvaluationUpdate;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedEvaluations;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechModelEvaluationsApi
 */
@Disabled
public class CustomSpeechModelEvaluationsApiTest {

    private final CustomSpeechModelEvaluationsApi api = new CustomSpeechModelEvaluationsApi();

    /**
     * Creates a new evaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsCreateTest() throws ApiException {
        Evaluation evaluation = null;
        Evaluation response = api.evaluationsCreate(evaluation);
        // TODO: test validations
    }

    /**
     * Deletes the evaluation identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsDeleteTest() throws ApiException {
        UUID id = null;
        api.evaluationsDelete(id);
        // TODO: test validations
    }

    /**
     * Gets the evaluation identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsGetTest() throws ApiException {
        UUID id = null;
        Evaluation response = api.evaluationsGet(id);
        // TODO: test validations
    }

    /**
     * Gets one specific file (identified with fileId) from an evaluation (identified with id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsGetFileTest() throws ApiException {
        UUID id = null;
        UUID fileId = null;
        Integer sasValidityInSeconds = null;
        ModelFile response = api.evaluationsGetFile(id, fileId, sasValidityInSeconds);
        // TODO: test validations
    }

    /**
     * Gets the list of evaluations for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedEvaluations response = api.evaluationsList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the files of the evaluation identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsListFilesTest() throws ApiException {
        UUID id = null;
        Integer sasValidityInSeconds = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedFiles response = api.evaluationsListFiles(id, sasValidityInSeconds, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets a list of supported locales for evaluations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsListSupportedLocalesTest() throws ApiException {
        List<String> response = api.evaluationsListSupportedLocales();
        // TODO: test validations
    }

    /**
     * Updates the mutable details of the evaluation identified by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluationsUpdateTest() throws ApiException {
        UUID id = null;
        EvaluationUpdate evaluationUpdate = null;
        Evaluation response = api.evaluationsUpdate(id, evaluationUpdate);
        // TODO: test validations
    }

}
