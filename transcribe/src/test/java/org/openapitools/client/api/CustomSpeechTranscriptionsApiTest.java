/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedFiles;
import org.openapitools.client.model.PaginatedTranscriptions;
import org.openapitools.client.model.Transcription;
import org.openapitools.client.model.TranscriptionUpdate;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomSpeechTranscriptionsApi
 */
@Disabled
public class CustomSpeechTranscriptionsApiTest {

    private final CustomSpeechTranscriptionsApi api = new CustomSpeechTranscriptionsApi();

    /**
     * Creates a new transcription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsCreateTest() throws ApiException {
        Transcription transcription = null;
        Transcription response = api.transcriptionsCreate(transcription);
        // TODO: test validations
    }

    /**
     * Deletes the specified transcription task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsDeleteTest() throws ApiException {
        UUID id = null;
        api.transcriptionsDelete(id);
        // TODO: test validations
    }

    /**
     * Gets the transcription identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsGetTest() throws ApiException {
        UUID id = null;
        Transcription response = api.transcriptionsGet(id);
        // TODO: test validations
    }

    /**
     * Gets one specific file (identified with fileId) from a transcription (identified with id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsGetFileTest() throws ApiException {
        UUID id = null;
        UUID fileId = null;
        Integer sasValidityInSeconds = null;
        ModelFile response = api.transcriptionsGetFile(id, fileId, sasValidityInSeconds);
        // TODO: test validations
    }

    /**
     * Gets a list of transcriptions for the authenticated subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsListTest() throws ApiException {
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedTranscriptions response = api.transcriptionsList(skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets the files of the transcription identified by the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsListFilesTest() throws ApiException {
        UUID id = null;
        Integer sasValidityInSeconds = null;
        Integer skip = null;
        Integer top = null;
        String filter = null;
        PaginatedFiles response = api.transcriptionsListFiles(id, sasValidityInSeconds, skip, top, filter);
        // TODO: test validations
    }

    /**
     * Gets a list of supported locales for offline transcriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsListSupportedLocalesTest() throws ApiException {
        List<String> response = api.transcriptionsListSupportedLocales();
        // TODO: test validations
    }

    /**
     * Updates the mutable details of the transcription identified by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transcriptionsUpdateTest() throws ApiException {
        UUID id = null;
        TranscriptionUpdate transcriptionUpdate = null;
        Transcription response = api.transcriptionsUpdate(id, transcriptionUpdate);
        // TODO: test validations
    }

}
