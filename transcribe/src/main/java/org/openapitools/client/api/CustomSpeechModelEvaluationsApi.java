/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.Evaluation;
import org.openapitools.client.model.EvaluationUpdate;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedEvaluations;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class CustomSpeechModelEvaluationsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CustomSpeechModelEvaluationsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CustomSpeechModelEvaluationsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new evaluation.
   * 
   * @param evaluation The details of the new evaluation. (required)
   * @return Evaluation
   * @throws ApiException if fails to make API call
   */
  public Evaluation evaluationsCreate(Evaluation evaluation) throws ApiException {
    ApiResponse<Evaluation> localVarResponse = evaluationsCreateWithHttpInfo(evaluation);
    return localVarResponse.getData();
  }

  /**
   * Creates a new evaluation.
   * 
   * @param evaluation The details of the new evaluation. (required)
   * @return ApiResponse&lt;Evaluation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Evaluation> evaluationsCreateWithHttpInfo(Evaluation evaluation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsCreateRequestBuilder(evaluation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsCreate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Evaluation>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Evaluation>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Evaluation>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsCreateRequestBuilder(Evaluation evaluation) throws ApiException {
    // verify the required parameter 'evaluation' is set
    if (evaluation == null) {
      throw new ApiException(400, "Missing the required parameter 'evaluation' when calling evaluationsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(evaluation);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @throws ApiException if fails to make API call
   */
  public void evaluationsDelete(UUID id) throws ApiException {
    evaluationsDeleteWithHttpInfo(id);
  }

  /**
   * Deletes the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> evaluationsDeleteWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsDelete", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsDeleteRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evaluationsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @return Evaluation
   * @throws ApiException if fails to make API call
   */
  public Evaluation evaluationsGet(UUID id) throws ApiException {
    ApiResponse<Evaluation> localVarResponse = evaluationsGetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @return ApiResponse&lt;Evaluation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Evaluation> evaluationsGetWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsGetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsGet", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Evaluation>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Evaluation>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Evaluation>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsGetRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evaluationsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets one specific file (identified with fileId) from an evaluation (identified with id).
   * 
   * @param id The identifier of the evaluation. (required)
   * @param fileId The identifier of the file. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ModelFile
   * @throws ApiException if fails to make API call
   */
  public ModelFile evaluationsGetFile(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    ApiResponse<ModelFile> localVarResponse = evaluationsGetFileWithHttpInfo(id, fileId, sasValidityInSeconds);
    return localVarResponse.getData();
  }

  /**
   * Gets one specific file (identified with fileId) from an evaluation (identified with id).
   * 
   * @param id The identifier of the evaluation. (required)
   * @param fileId The identifier of the file. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ApiResponse&lt;ModelFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelFile> evaluationsGetFileWithHttpInfo(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsGetFileRequestBuilder(id, fileId, sasValidityInSeconds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsGetFile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ModelFile>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ModelFile>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ModelFile>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsGetFileRequestBuilder(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evaluationsGetFile");
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling evaluationsGetFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/{id}/files/{fileId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{fileId}", ApiClient.urlEncode(fileId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of evaluations for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available evaluations.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status and locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;displayName eq &#39;My evaluation&#39; (optional)
   * @return PaginatedEvaluations
   * @throws ApiException if fails to make API call
   */
  public PaginatedEvaluations evaluationsList(Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedEvaluations> localVarResponse = evaluationsListWithHttpInfo(skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of evaluations for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available evaluations.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status and locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;displayName eq &#39;My evaluation&#39; (optional)
   * @return ApiResponse&lt;PaginatedEvaluations&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedEvaluations> evaluationsListWithHttpInfo(Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsListRequestBuilder(skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedEvaluations>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedEvaluations>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedEvaluations>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsListRequestBuilder(Integer skip, Integer top, String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the files of the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;name eq &#39;myaudio.wav&#39; and kind eq &#39;Audio&#39; (optional)
   * @return PaginatedFiles
   * @throws ApiException if fails to make API call
   */
  public PaginatedFiles evaluationsListFiles(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedFiles> localVarResponse = evaluationsListFilesWithHttpInfo(id, sasValidityInSeconds, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the files of the evaluation identified by the given ID.
   * 
   * @param id The identifier of the evaluation. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;name eq &#39;myaudio.wav&#39; and kind eq &#39;Audio&#39; (optional)
   * @return ApiResponse&lt;PaginatedFiles&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedFiles> evaluationsListFilesWithHttpInfo(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsListFilesRequestBuilder(id, sasValidityInSeconds, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsListFiles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedFiles>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedFiles>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedFiles>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsListFilesRequestBuilder(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evaluationsListFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/{id}/files"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of supported locales for evaluations.
   * 
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> evaluationsListSupportedLocales() throws ApiException {
    ApiResponse<List<String>> localVarResponse = evaluationsListSupportedLocalesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets a list of supported locales for evaluations.
   * 
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> evaluationsListSupportedLocalesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsListSupportedLocalesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsListSupportedLocales", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<String>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsListSupportedLocalesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/locales";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates the mutable details of the evaluation identified by its id.
   * 
   * @param id The identifier of the evaluation. (required)
   * @param evaluationUpdate The object containing the updated fields of the evaluation. (required)
   * @return Evaluation
   * @throws ApiException if fails to make API call
   */
  public Evaluation evaluationsUpdate(UUID id, EvaluationUpdate evaluationUpdate) throws ApiException {
    ApiResponse<Evaluation> localVarResponse = evaluationsUpdateWithHttpInfo(id, evaluationUpdate);
    return localVarResponse.getData();
  }

  /**
   * Updates the mutable details of the evaluation identified by its id.
   * 
   * @param id The identifier of the evaluation. (required)
   * @param evaluationUpdate The object containing the updated fields of the evaluation. (required)
   * @return ApiResponse&lt;Evaluation&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Evaluation> evaluationsUpdateWithHttpInfo(UUID id, EvaluationUpdate evaluationUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = evaluationsUpdateRequestBuilder(id, evaluationUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("evaluationsUpdate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Evaluation>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Evaluation>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Evaluation>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder evaluationsUpdateRequestBuilder(UUID id, EvaluationUpdate evaluationUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling evaluationsUpdate");
    }
    // verify the required parameter 'evaluationUpdate' is set
    if (evaluationUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'evaluationUpdate' when calling evaluationsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/evaluations/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(evaluationUpdate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
