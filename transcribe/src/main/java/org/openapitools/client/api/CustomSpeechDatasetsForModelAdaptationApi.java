/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.CommitBlocksEntry;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.DatasetKind;
import org.openapitools.client.model.DatasetUpdate;
import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedDatasets;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.UploadedBlocks;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class CustomSpeechDatasetsForModelAdaptationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CustomSpeechDatasetsForModelAdaptationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CustomSpeechDatasetsForModelAdaptationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Commit block list to complete the upload of the dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @param blockList The list of blocks that compile the dataset. (required)
   * @throws ApiException if fails to make API call
   */
  public void datasetsCommitBlocks(UUID id, List<CommitBlocksEntry> blockList) throws ApiException {
    datasetsCommitBlocksWithHttpInfo(id, blockList);
  }

  /**
   * Commit block list to complete the upload of the dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @param blockList The list of blocks that compile the dataset. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> datasetsCommitBlocksWithHttpInfo(UUID id, List<CommitBlocksEntry> blockList) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsCommitBlocksRequestBuilder(id, blockList);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsCommitBlocks", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsCommitBlocksRequestBuilder(UUID id, List<CommitBlocksEntry> blockList) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsCommitBlocks");
    }
    // verify the required parameter 'blockList' is set
    if (blockList == null) {
      throw new ApiException(400, "Missing the required parameter 'blockList' when calling datasetsCommitBlocks");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}/blocks:commit"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(blockList);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Uploads and creates a new dataset by getting the data from a specified URL or starts waiting for data blocks to be uploaded.
   * 
   * @param dataset Definition for the new dataset. (required)
   * @return Dataset
   * @throws ApiException if fails to make API call
   */
  public Dataset datasetsCreate(Dataset dataset) throws ApiException {
    ApiResponse<Dataset> localVarResponse = datasetsCreateWithHttpInfo(dataset);
    return localVarResponse.getData();
  }

  /**
   * Uploads and creates a new dataset by getting the data from a specified URL or starts waiting for data blocks to be uploaded.
   * 
   * @param dataset Definition for the new dataset. (required)
   * @return ApiResponse&lt;Dataset&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Dataset> datasetsCreateWithHttpInfo(Dataset dataset) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsCreateRequestBuilder(dataset);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsCreate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Dataset>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Dataset>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Dataset>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsCreateRequestBuilder(Dataset dataset) throws ApiException {
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      throw new ApiException(400, "Missing the required parameter 'dataset' when calling datasetsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(dataset);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the specified dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @throws ApiException if fails to make API call
   */
  public void datasetsDelete(UUID id) throws ApiException {
    datasetsDeleteWithHttpInfo(id);
  }

  /**
   * Deletes the specified dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> datasetsDeleteWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsDelete", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsDeleteRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the dataset identified by the given ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @return Dataset
   * @throws ApiException if fails to make API call
   */
  public Dataset datasetsGet(UUID id) throws ApiException {
    ApiResponse<Dataset> localVarResponse = datasetsGetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the dataset identified by the given ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @return ApiResponse&lt;Dataset&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Dataset> datasetsGetWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsGetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsGet", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Dataset>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Dataset>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Dataset>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsGetRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of uploaded blocks for this dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @return UploadedBlocks
   * @throws ApiException if fails to make API call
   */
  public UploadedBlocks datasetsGetBlocks(UUID id) throws ApiException {
    ApiResponse<UploadedBlocks> localVarResponse = datasetsGetBlocksWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of uploaded blocks for this dataset.
   * 
   * @param id The identifier of the dataset. (required)
   * @return ApiResponse&lt;UploadedBlocks&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UploadedBlocks> datasetsGetBlocksWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsGetBlocksRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsGetBlocks", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UploadedBlocks>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UploadedBlocks>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UploadedBlocks>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsGetBlocksRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsGetBlocks");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}/blocks"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets one specific file (identified with fileId) from a dataset (identified with id).
   * 
   * @param id The identifier of the dataset. (required)
   * @param fileId The identifier of the file. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ModelFile
   * @throws ApiException if fails to make API call
   */
  public ModelFile datasetsGetFile(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    ApiResponse<ModelFile> localVarResponse = datasetsGetFileWithHttpInfo(id, fileId, sasValidityInSeconds);
    return localVarResponse.getData();
  }

  /**
   * Gets one specific file (identified with fileId) from a dataset (identified with id).
   * 
   * @param id The identifier of the dataset. (required)
   * @param fileId The identifier of the file. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ApiResponse&lt;ModelFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelFile> datasetsGetFileWithHttpInfo(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsGetFileRequestBuilder(id, fileId, sasValidityInSeconds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsGetFile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ModelFile>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ModelFile>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ModelFile>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsGetFileRequestBuilder(UUID id, UUID fileId, Integer sasValidityInSeconds) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsGetFile");
    }
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling datasetsGetFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}/files/{fileId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{fileId}", ApiClient.urlEncode(fileId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of datasets for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available datasets.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              -Example:               filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z and displayName eq &#39;My dataset&#39; (optional)
   * @return PaginatedDatasets
   * @throws ApiException if fails to make API call
   */
  public PaginatedDatasets datasetsList(Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedDatasets> localVarResponse = datasetsListWithHttpInfo(skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets a list of datasets for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available datasets.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              -Example:               filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z and displayName eq &#39;My dataset&#39; (optional)
   * @return ApiResponse&lt;PaginatedDatasets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedDatasets> datasetsListWithHttpInfo(Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsListRequestBuilder(skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedDatasets>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedDatasets>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedDatasets>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsListRequestBuilder(Integer skip, Integer top, String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the files of the dataset identified by the given ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;name eq &#39;myaudio.wav&#39; and kind eq &#39;Audio&#39; (optional)
   * @return PaginatedFiles
   * @throws ApiException if fails to make API call
   */
  public PaginatedFiles datasetsListFiles(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedFiles> localVarResponse = datasetsListFilesWithHttpInfo(id, sasValidityInSeconds, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the files of the dataset identified by the given ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available files.              - Supported properties: name, createdDateTime, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;name eq &#39;myaudio.wav&#39; and kind eq &#39;Audio&#39; (optional)
   * @return ApiResponse&lt;PaginatedFiles&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedFiles> datasetsListFilesWithHttpInfo(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsListFilesRequestBuilder(id, sasValidityInSeconds, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsListFiles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedFiles>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedFiles>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedFiles>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsListFilesRequestBuilder(UUID id, Integer sasValidityInSeconds, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsListFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}/files"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of supported locales for datasets.
   * 
   * @return Map&lt;String, List&lt;DatasetKind&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, List<DatasetKind>> datasetsListSupportedLocales() throws ApiException {
    ApiResponse<Map<String, List<DatasetKind>>> localVarResponse = datasetsListSupportedLocalesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets a list of supported locales for datasets.
   * 
   * @return ApiResponse&lt;Map&lt;String, List&lt;DatasetKind&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, List<DatasetKind>>> datasetsListSupportedLocalesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsListSupportedLocalesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsListSupportedLocales", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Map<String, List<DatasetKind>>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Map<String, List<DatasetKind>>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, List<DatasetKind>>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsListSupportedLocalesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/locales";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates the mutable details of the dataset identified by its ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @param datasetUpdate The updated values for the dataset. (required)
   * @return Dataset
   * @throws ApiException if fails to make API call
   */
  public Dataset datasetsUpdate(UUID id, DatasetUpdate datasetUpdate) throws ApiException {
    ApiResponse<Dataset> localVarResponse = datasetsUpdateWithHttpInfo(id, datasetUpdate);
    return localVarResponse.getData();
  }

  /**
   * Updates the mutable details of the dataset identified by its ID.
   * 
   * @param id The identifier of the dataset. (required)
   * @param datasetUpdate The updated values for the dataset. (required)
   * @return ApiResponse&lt;Dataset&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Dataset> datasetsUpdateWithHttpInfo(UUID id, DatasetUpdate datasetUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsUpdateRequestBuilder(id, datasetUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsUpdate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Dataset>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Dataset>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Dataset>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsUpdateRequestBuilder(UUID id, DatasetUpdate datasetUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsUpdate");
    }
    // verify the required parameter 'datasetUpdate' is set
    if (datasetUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'datasetUpdate' when calling datasetsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(datasetUpdate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Uploads data and creates a new dataset.
   * 
   * @param displayName The name of this dataset. (required)
   * @param locale The locale of this dataset. (required)
   * @param kind The kind of the dataset. Possible values are \\\&quot;Language\\\&quot;, \\\&quot;Acoustic\\\&quot;, \\\&quot;Pronunciation\\\&quot;, \\\&quot;AudioFiles\\\&quot;, \\\&quot;LanguageMarkdown\\\&quot;, \\\&quot;OutputFormatting\\\&quot;. (required)
   * @param project The optional string representation of the url of a project. If set, the dataset will be associated with that project. (optional)
   * @param description Optional description of this dataset. (optional)
   * @param customProperties The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10. (optional)
   * @param data For acoustic datasets, a zip file containing the audio data and a text file containing the transcriptions for the audio data. For language datasets, a text file containing the language or pronunciation data. Required in both cases. (optional)
   * @param email An optional string containing the email address to send email notifications to in case the operation completes. The value will be removed after successfully sending the email. (optional)
   * @return Dataset
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public Dataset datasetsUpload(String displayName, String locale, String kind, String project, String description, String customProperties, File data, String email) throws ApiException {
    ApiResponse<Dataset> localVarResponse = datasetsUploadWithHttpInfo(displayName, locale, kind, project, description, customProperties, data, email);
    return localVarResponse.getData();
  }

  /**
   * Uploads data and creates a new dataset.
   * 
   * @param displayName The name of this dataset. (required)
   * @param locale The locale of this dataset. (required)
   * @param kind The kind of the dataset. Possible values are \\\&quot;Language\\\&quot;, \\\&quot;Acoustic\\\&quot;, \\\&quot;Pronunciation\\\&quot;, \\\&quot;AudioFiles\\\&quot;, \\\&quot;LanguageMarkdown\\\&quot;, \\\&quot;OutputFormatting\\\&quot;. (required)
   * @param project The optional string representation of the url of a project. If set, the dataset will be associated with that project. (optional)
   * @param description Optional description of this dataset. (optional)
   * @param customProperties The optional custom properties of this entity. The maximum allowed key length is 64 characters, the maximum allowed value length is 256 characters and the count of allowed entries is 10. (optional)
   * @param data For acoustic datasets, a zip file containing the audio data and a text file containing the transcriptions for the audio data. For language datasets, a text file containing the language or pronunciation data. Required in both cases. (optional)
   * @param email An optional string containing the email address to send email notifications to in case the operation completes. The value will be removed after successfully sending the email. (optional)
   * @return ApiResponse&lt;Dataset&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<Dataset> datasetsUploadWithHttpInfo(String displayName, String locale, String kind, String project, String description, String customProperties, File data, String email) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsUploadRequestBuilder(displayName, locale, kind, project, description, customProperties, data, email);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsUpload", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Dataset>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Dataset>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Dataset>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsUploadRequestBuilder(String displayName, String locale, String kind, String project, String description, String customProperties, File data, String email) throws ApiException {
    // verify the required parameter 'displayName' is set
    if (displayName == null) {
      throw new ApiException(400, "Missing the required parameter 'displayName' when calling datasetsUpload");
    }
    // verify the required parameter 'locale' is set
    if (locale == null) {
      throw new ApiException(400, "Missing the required parameter 'locale' when calling datasetsUpload");
    }
    // verify the required parameter 'kind' is set
    if (kind == null) {
      throw new ApiException(400, "Missing the required parameter 'kind' when calling datasetsUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/upload";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addTextBody("project", project.toString());
    multiPartBuilder.addTextBody("displayName", displayName.toString());
    multiPartBuilder.addTextBody("description", description.toString());
    multiPartBuilder.addTextBody("locale", locale.toString());
    multiPartBuilder.addTextBody("kind", kind.toString());
    multiPartBuilder.addTextBody("customProperties", customProperties.toString());
    multiPartBuilder.addBinaryBody("data", data);
    hasFiles = true;
    multiPartBuilder.addTextBody("email", email.toString());
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Upload a block of data for the dataset. The maximum size of the block is 8MiB.
   * 
   * @param id The identifier of the dataset. (required)
   * @param blockid A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block. Note that the Base64 string must be URL-encoded. (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void datasetsUploadBlock(UUID id, String blockid, File body) throws ApiException {
    datasetsUploadBlockWithHttpInfo(id, blockid, body);
  }

  /**
   * Upload a block of data for the dataset. The maximum size of the block is 8MiB.
   * 
   * @param id The identifier of the dataset. (required)
   * @param blockid A valid Base64 string value that identifies the block. Prior to encoding, the string must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified for the blockid parameter must be the same size for each block. Note that the Base64 string must be URL-encoded. (required)
   * @param body  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> datasetsUploadBlockWithHttpInfo(UUID id, String blockid, File body) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = datasetsUploadBlockRequestBuilder(id, blockid, body);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("datasetsUploadBlock", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder datasetsUploadBlockRequestBuilder(UUID id, String blockid, File body) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling datasetsUploadBlock");
    }
    // verify the required parameter 'blockid' is set
    if (blockid == null) {
      throw new ApiException(400, "Missing the required parameter 'blockid' when calling datasetsUploadBlock");
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling datasetsUploadBlock");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/datasets/{id}/blocks"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "blockid";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("blockid", blockid));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/octet-stream");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
