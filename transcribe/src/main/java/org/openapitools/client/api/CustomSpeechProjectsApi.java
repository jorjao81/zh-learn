/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedCustomModels;
import org.openapitools.client.model.PaginatedDatasets;
import org.openapitools.client.model.PaginatedEndpoints;
import org.openapitools.client.model.PaginatedEvaluations;
import org.openapitools.client.model.PaginatedProjects;
import org.openapitools.client.model.PaginatedTranscriptions;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectUpdate;
import java.net.URI;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class CustomSpeechProjectsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CustomSpeechProjectsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CustomSpeechProjectsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new project.
   * 
   * @param project The details of the project. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project projectsCreate(Project project) throws ApiException {
    ApiResponse<Project> localVarResponse = projectsCreateWithHttpInfo(project);
    return localVarResponse.getData();
  }

  /**
   * Creates a new project.
   * 
   * @param project The details of the project. (required)
   * @return ApiResponse&lt;Project&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Project> projectsCreateWithHttpInfo(Project project) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsCreateRequestBuilder(project);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsCreate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Project>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Project>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Project>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsCreateRequestBuilder(Project project) throws ApiException {
    // verify the required parameter 'project' is set
    if (project == null) {
      throw new ApiException(400, "Missing the required parameter 'project' when calling projectsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(project);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @throws ApiException if fails to make API call
   */
  public void projectsDelete(UUID id) throws ApiException {
    projectsDeleteWithHttpInfo(id);
  }

  /**
   * Deletes the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> projectsDeleteWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsDelete", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsDeleteRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project projectsGet(UUID id) throws ApiException {
    ApiResponse<Project> localVarResponse = projectsGetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @return ApiResponse&lt;Project&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Project> projectsGetWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsGetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsGet", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Project>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Project>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Project>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsGetRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of projects for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available projects.              - Supported properties: displayName, description, createdDateTime, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;displayName eq &#39;My test&#39; (optional)
   * @return PaginatedProjects
   * @throws ApiException if fails to make API call
   */
  public PaginatedProjects projectsList(Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedProjects> localVarResponse = projectsListWithHttpInfo(skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of projects for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available projects.              - Supported properties: displayName, description, createdDateTime, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;displayName eq &#39;My test&#39; (optional)
   * @return ApiResponse&lt;PaginatedProjects&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedProjects> projectsListWithHttpInfo(Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListRequestBuilder(skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedProjects>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedProjects>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedProjects>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListRequestBuilder(Integer skip, Integer top, String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of datasets for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available datasets.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z (optional)
   * @return PaginatedDatasets
   * @throws ApiException if fails to make API call
   */
  public PaginatedDatasets projectsListDatasets(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedDatasets> localVarResponse = projectsListDatasetsWithHttpInfo(id, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of datasets for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available datasets.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale, kind.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z (optional)
   * @return ApiResponse&lt;PaginatedDatasets&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedDatasets> projectsListDatasetsWithHttpInfo(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListDatasetsRequestBuilder(id, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListDatasets", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedDatasets>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedDatasets>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedDatasets>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListDatasetsRequestBuilder(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsListDatasets");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}/datasets"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of endpoints for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available endpoints.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;locale eq &#39;en-US&#39; (optional)
   * @return PaginatedEndpoints
   * @throws ApiException if fails to make API call
   */
  public PaginatedEndpoints projectsListEndpoints(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedEndpoints> localVarResponse = projectsListEndpointsWithHttpInfo(id, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of endpoints for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available endpoints.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;locale eq &#39;en-US&#39; (optional)
   * @return ApiResponse&lt;PaginatedEndpoints&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedEndpoints> projectsListEndpointsWithHttpInfo(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListEndpointsRequestBuilder(id, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListEndpoints", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedEndpoints>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedEndpoints>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedEndpoints>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListEndpointsRequestBuilder(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsListEndpoints");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}/endpoints"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of evaluations for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available evaluations.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status and locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example                filter&#x3D;displayName eq &#39;My evaluation&#39; (optional)
   * @return PaginatedEvaluations
   * @throws ApiException if fails to make API call
   */
  public PaginatedEvaluations projectsListEvaluations(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedEvaluations> localVarResponse = projectsListEvaluationsWithHttpInfo(id, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of evaluations for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available evaluations.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status and locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example                filter&#x3D;displayName eq &#39;My evaluation&#39; (optional)
   * @return ApiResponse&lt;PaginatedEvaluations&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedEvaluations> projectsListEvaluationsWithHttpInfo(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListEvaluationsRequestBuilder(id, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListEvaluations", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedEvaluations>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedEvaluations>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedEvaluations>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListEvaluationsRequestBuilder(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsListEvaluations");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}/evaluations"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of models for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available models.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.                - Operators:                  - eq, ne are supported for all properties.                  - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                  - and, or, not are supported.              - Example:                filter&#x3D;status eq &#39;NotStarted&#39; or status eq &#39;Running&#39; (optional)
   * @return PaginatedCustomModels
   * @throws ApiException if fails to make API call
   */
  public PaginatedCustomModels projectsListModels(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedCustomModels> localVarResponse = projectsListModelsWithHttpInfo(id, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of models for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available models.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.                - Operators:                  - eq, ne are supported for all properties.                  - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                  - and, or, not are supported.              - Example:                filter&#x3D;status eq &#39;NotStarted&#39; or status eq &#39;Running&#39; (optional)
   * @return ApiResponse&lt;PaginatedCustomModels&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedCustomModels> projectsListModelsWithHttpInfo(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListModelsRequestBuilder(id, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListModels", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedCustomModels>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedCustomModels>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedCustomModels>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListModelsRequestBuilder(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsListModels");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}/models"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of supported locales.
   * 
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> projectsListSupportedLocales() throws ApiException {
    ApiResponse<List<String>> localVarResponse = projectsListSupportedLocalesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets the list of supported locales.
   * 
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> projectsListSupportedLocalesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListSupportedLocalesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListSupportedLocales", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<String>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListSupportedLocalesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/locales";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of transcriptions for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available transcriptions.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z (optional)
   * @return PaginatedTranscriptions
   * @throws ApiException if fails to make API call
   */
  public PaginatedTranscriptions projectsListTranscriptions(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedTranscriptions> localVarResponse = projectsListTranscriptionsWithHttpInfo(id, skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of transcriptions for specified project.
   * 
   * @param id The identifier of the project. (required)
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available transcriptions.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;createdDateTime gt 2022-02-01T11:00:00Z (optional)
   * @return ApiResponse&lt;PaginatedTranscriptions&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedTranscriptions> projectsListTranscriptionsWithHttpInfo(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsListTranscriptionsRequestBuilder(id, skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsListTranscriptions", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedTranscriptions>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedTranscriptions>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedTranscriptions>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsListTranscriptionsRequestBuilder(UUID id, Integer skip, Integer top, String filter) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsListTranscriptions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}/transcriptions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @param projectUpdate The updated values for the project. (required)
   * @return Project
   * @throws ApiException if fails to make API call
   */
  public Project projectsUpdate(UUID id, ProjectUpdate projectUpdate) throws ApiException {
    ApiResponse<Project> localVarResponse = projectsUpdateWithHttpInfo(id, projectUpdate);
    return localVarResponse.getData();
  }

  /**
   * Updates the project identified by the given ID.
   * 
   * @param id The identifier of the project. (required)
   * @param projectUpdate The updated values for the project. (required)
   * @return ApiResponse&lt;Project&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Project> projectsUpdateWithHttpInfo(UUID id, ProjectUpdate projectUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = projectsUpdateRequestBuilder(id, projectUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("projectsUpdate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Project>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Project>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Project>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder projectsUpdateRequestBuilder(UUID id, ProjectUpdate projectUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling projectsUpdate");
    }
    // verify the required parameter 'projectUpdate' is set
    if (projectUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'projectUpdate' when calling projectsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/projects/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(projectUpdate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
