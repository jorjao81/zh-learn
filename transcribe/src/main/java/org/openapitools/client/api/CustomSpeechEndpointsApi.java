/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;

import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointUpdate;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ModelFile;
import org.openapitools.client.model.PaginatedEndpoints;
import org.openapitools.client.model.PaginatedFiles;
import java.net.URI;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class CustomSpeechEndpointsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public CustomSpeechEndpointsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CustomSpeechEndpointsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Creates a new endpoint.
   * 
   * @param endpoint The details of the endpoint. (required)
   * @return Endpoint
   * @throws ApiException if fails to make API call
   */
  public Endpoint endpointsCreate(Endpoint endpoint) throws ApiException {
    ApiResponse<Endpoint> localVarResponse = endpointsCreateWithHttpInfo(endpoint);
    return localVarResponse.getData();
  }

  /**
   * Creates a new endpoint.
   * 
   * @param endpoint The details of the endpoint. (required)
   * @return ApiResponse&lt;Endpoint&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Endpoint> endpointsCreateWithHttpInfo(Endpoint endpoint) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsCreateRequestBuilder(endpoint);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsCreate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Endpoint>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Endpoint>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Endpoint>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsCreateRequestBuilder(Endpoint endpoint) throws ApiException {
    // verify the required parameter 'endpoint' is set
    if (endpoint == null) {
      throw new ApiException(400, "Missing the required parameter 'endpoint' when calling endpointsCreate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(endpoint);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @throws ApiException if fails to make API call
   */
  public void endpointsDelete(UUID id) throws ApiException {
    endpointsDeleteWithHttpInfo(id);
  }

  /**
   * Deletes the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> endpointsDeleteWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsDeleteRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsDelete", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsDeleteRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes one audio or transcription log that have been stored when using the default base model of a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param logId The identifier of the log. (required)
   * @throws ApiException if fails to make API call
   */
  public void endpointsDeleteBaseModelLog(String locale, String logId) throws ApiException {
    endpointsDeleteBaseModelLogWithHttpInfo(locale, logId);
  }

  /**
   * Deletes one audio or transcription log that have been stored when using the default base model of a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param logId The identifier of the log. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> endpointsDeleteBaseModelLogWithHttpInfo(String locale, String logId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsDeleteBaseModelLogRequestBuilder(locale, logId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsDeleteBaseModelLog", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsDeleteBaseModelLogRequestBuilder(String locale, String logId) throws ApiException {
    // verify the required parameter 'locale' is set
    if (locale == null) {
      throw new ApiException(400, "Missing the required parameter 'locale' when calling endpointsDeleteBaseModelLog");
    }
    // verify the required parameter 'logId' is set
    if (logId == null) {
      throw new ApiException(400, "Missing the required parameter 'logId' when calling endpointsDeleteBaseModelLog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/base/{locale}/files/logs/{logId}"
        .replace("{locale}", ApiClient.urlEncode(locale.toString()))
        .replace("{logId}", ApiClient.urlEncode(logId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the specified audio and transcription logs that have been stored when using the default base model of a given language. It deletes all logs before (and including) a specific day.
   * Deletion process is done asynchronously and can take up to one day depending on the amount of log files.
   * @param locale The language used to select the default base model. (required)
   * @param endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \&quot;yyyy-mm-dd\&quot;. For instance, \&quot;2023-03-15\&quot; results in deleting all logs on March 15th, 2023 and before.              Deletes all existing logs when date is not specified. (optional)
   * @throws ApiException if fails to make API call
   */
  public void endpointsDeleteBaseModelLogs(String locale, String endDate) throws ApiException {
    endpointsDeleteBaseModelLogsWithHttpInfo(locale, endDate);
  }

  /**
   * Deletes the specified audio and transcription logs that have been stored when using the default base model of a given language. It deletes all logs before (and including) a specific day.
   * Deletion process is done asynchronously and can take up to one day depending on the amount of log files.
   * @param locale The language used to select the default base model. (required)
   * @param endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \&quot;yyyy-mm-dd\&quot;. For instance, \&quot;2023-03-15\&quot; results in deleting all logs on March 15th, 2023 and before.              Deletes all existing logs when date is not specified. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> endpointsDeleteBaseModelLogsWithHttpInfo(String locale, String endDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsDeleteBaseModelLogsRequestBuilder(locale, endDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsDeleteBaseModelLogs", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsDeleteBaseModelLogsRequestBuilder(String locale, String endDate) throws ApiException {
    // verify the required parameter 'locale' is set
    if (locale == null) {
      throw new ApiException(400, "Missing the required parameter 'locale' when calling endpointsDeleteBaseModelLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/base/{locale}/files/logs"
        .replace("{locale}", ApiClient.urlEncode(locale.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "endDate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes one audio or transcription log that have been stored for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param logId The identifier of the log. (required)
   * @throws ApiException if fails to make API call
   */
  public void endpointsDeleteLog(UUID id, String logId) throws ApiException {
    endpointsDeleteLogWithHttpInfo(id, logId);
  }

  /**
   * Deletes one audio or transcription log that have been stored for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param logId The identifier of the log. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> endpointsDeleteLogWithHttpInfo(UUID id, String logId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsDeleteLogRequestBuilder(id, logId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsDeleteLog", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsDeleteLogRequestBuilder(UUID id, String logId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsDeleteLog");
    }
    // verify the required parameter 'logId' is set
    if (logId == null) {
      throw new ApiException(400, "Missing the required parameter 'logId' when calling endpointsDeleteLog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}/files/logs/{logId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{logId}", ApiClient.urlEncode(logId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes the specified audio and transcription logs that have been stored for a given endpoint. It deletes all logs before (and including) a specific day.
   * The deletion process is done asynchronously and can take up to one day depending on the amount of log files.
   * @param id The identifier of the endpoint. (required)
   * @param endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \&quot;yyyy-mm-dd\&quot;. For instance, \&quot;2023-03-15\&quot; results in deleting all logs on March 15th, 2023 and before.              Deletes all existing logs when date is not specified. (optional)
   * @throws ApiException if fails to make API call
   */
  public void endpointsDeleteLogs(UUID id, String endDate) throws ApiException {
    endpointsDeleteLogsWithHttpInfo(id, endDate);
  }

  /**
   * Deletes the specified audio and transcription logs that have been stored for a given endpoint. It deletes all logs before (and including) a specific day.
   * The deletion process is done asynchronously and can take up to one day depending on the amount of log files.
   * @param id The identifier of the endpoint. (required)
   * @param endDate The end date of the audio logs deletion (specific day, UTC).              Expected format: \&quot;yyyy-mm-dd\&quot;. For instance, \&quot;2023-03-15\&quot; results in deleting all logs on March 15th, 2023 and before.              Deletes all existing logs when date is not specified. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> endpointsDeleteLogsWithHttpInfo(UUID id, String endDate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsDeleteLogsRequestBuilder(id, endDate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsDeleteLogs", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsDeleteLogsRequestBuilder(UUID id, String endDate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsDeleteLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}/files/logs"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "endDate";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @return Endpoint
   * @throws ApiException if fails to make API call
   */
  public Endpoint endpointsGet(UUID id) throws ApiException {
    ApiResponse<Endpoint> localVarResponse = endpointsGetWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Gets the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @return ApiResponse&lt;Endpoint&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Endpoint> endpointsGetWithHttpInfo(UUID id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsGetRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsGet", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Endpoint>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Endpoint>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Endpoint>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsGetRequestBuilder(UUID id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a specific audio or transcription log for the default base model in a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param logId The identifier of the log. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ModelFile
   * @throws ApiException if fails to make API call
   */
  public ModelFile endpointsGetBaseModelLog(String locale, String logId, Integer sasValidityInSeconds) throws ApiException {
    ApiResponse<ModelFile> localVarResponse = endpointsGetBaseModelLogWithHttpInfo(locale, logId, sasValidityInSeconds);
    return localVarResponse.getData();
  }

  /**
   * Gets a specific audio or transcription log for the default base model in a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param logId The identifier of the log. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ApiResponse&lt;ModelFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelFile> endpointsGetBaseModelLogWithHttpInfo(String locale, String logId, Integer sasValidityInSeconds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsGetBaseModelLogRequestBuilder(locale, logId, sasValidityInSeconds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsGetBaseModelLog", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ModelFile>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ModelFile>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ModelFile>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsGetBaseModelLogRequestBuilder(String locale, String logId, Integer sasValidityInSeconds) throws ApiException {
    // verify the required parameter 'locale' is set
    if (locale == null) {
      throw new ApiException(400, "Missing the required parameter 'locale' when calling endpointsGetBaseModelLog");
    }
    // verify the required parameter 'logId' is set
    if (logId == null) {
      throw new ApiException(400, "Missing the required parameter 'logId' when calling endpointsGetBaseModelLog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/base/{locale}/files/logs/{logId}"
        .replace("{locale}", ApiClient.urlEncode(locale.toString()))
        .replace("{logId}", ApiClient.urlEncode(logId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a specific audio or transcription log for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param logId The identifier of the log. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ModelFile
   * @throws ApiException if fails to make API call
   */
  public ModelFile endpointsGetLog(UUID id, String logId, Integer sasValidityInSeconds) throws ApiException {
    ApiResponse<ModelFile> localVarResponse = endpointsGetLogWithHttpInfo(id, logId, sasValidityInSeconds);
    return localVarResponse.getData();
  }

  /**
   * Gets a specific audio or transcription log for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param logId The identifier of the log. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @return ApiResponse&lt;ModelFile&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ModelFile> endpointsGetLogWithHttpInfo(UUID id, String logId, Integer sasValidityInSeconds) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsGetLogRequestBuilder(id, logId, sasValidityInSeconds);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsGetLog", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ModelFile>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ModelFile>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ModelFile>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsGetLogRequestBuilder(UUID id, String logId, Integer sasValidityInSeconds) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsGetLog");
    }
    // verify the required parameter 'logId' is set
    if (logId == null) {
      throw new ApiException(400, "Missing the required parameter 'logId' when calling endpointsGetLog");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}/files/logs/{logId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{logId}", ApiClient.urlEncode(logId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of endpoints for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available endpoints.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;locale eq &#39;en-US&#39; (optional)
   * @return PaginatedEndpoints
   * @throws ApiException if fails to make API call
   */
  public PaginatedEndpoints endpointsList(Integer skip, Integer top, String filter) throws ApiException {
    ApiResponse<PaginatedEndpoints> localVarResponse = endpointsListWithHttpInfo(skip, top, filter);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of endpoints for the authenticated subscription.
   * 
   * @param skip Number of datasets that will be skipped. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @param filter A filtering expression for selecting a subset of the available endpoints.              - Supported properties: displayName, description, createdDateTime, lastActionDateTime, status, locale.              - Operators:                - eq, ne are supported for all properties.                - gt, ge, lt, le are supported for createdDateTime and lastActionDateTime.                - and, or, not are supported.              - Example:                filter&#x3D;locale eq &#39;en-US&#39; (optional)
   * @return ApiResponse&lt;PaginatedEndpoints&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedEndpoints> endpointsListWithHttpInfo(Integer skip, Integer top, String filter) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsListRequestBuilder(skip, top, filter);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedEndpoints>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedEndpoints>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedEndpoints>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsListRequestBuilder(Integer skip, Integer top, String filter) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of audio and transcription logs that have been stored when using the default base model of a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @return PaginatedFiles
   * @throws ApiException if fails to make API call
   */
  public PaginatedFiles endpointsListBaseModelLogs(String locale, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    ApiResponse<PaginatedFiles> localVarResponse = endpointsListBaseModelLogsWithHttpInfo(locale, sasValidityInSeconds, skipToken, top);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of audio and transcription logs that have been stored when using the default base model of a given language.
   * 
   * @param locale The language used to select the default base model. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @return ApiResponse&lt;PaginatedFiles&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedFiles> endpointsListBaseModelLogsWithHttpInfo(String locale, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsListBaseModelLogsRequestBuilder(locale, sasValidityInSeconds, skipToken, top);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsListBaseModelLogs", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedFiles>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedFiles>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedFiles>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsListBaseModelLogsRequestBuilder(String locale, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    // verify the required parameter 'locale' is set
    if (locale == null) {
      throw new ApiException(400, "Missing the required parameter 'locale' when calling endpointsListBaseModelLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/base/{locale}/files/logs"
        .replace("{locale}", ApiClient.urlEncode(locale.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));
    localVarQueryParameterBaseName = "skipToken";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipToken", skipToken));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets the list of audio and transcription logs that have been stored for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @return PaginatedFiles
   * @throws ApiException if fails to make API call
   */
  public PaginatedFiles endpointsListLogs(UUID id, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    ApiResponse<PaginatedFiles> localVarResponse = endpointsListLogsWithHttpInfo(id, sasValidityInSeconds, skipToken, top);
    return localVarResponse.getData();
  }

  /**
   * Gets the list of audio and transcription logs that have been stored for a given endpoint.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param sasValidityInSeconds The duration in seconds that an SAS url should be valid. The default duration is 12 hours. When using BYOS (https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-encryption-of-data-at-rest#bring-your-own-storage-byos-for-customization-and-logging): A value of 0 means that a plain blob URI without SAS token will be generated. (optional)
   * @param skipToken Token to skip logs that were already retrieved in previous requests. Pagination starts from beginning when not defined. (optional)
   * @param top Number of datasets that will be included after skipping. (optional)
   * @return ApiResponse&lt;PaginatedFiles&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PaginatedFiles> endpointsListLogsWithHttpInfo(UUID id, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsListLogsRequestBuilder(id, sasValidityInSeconds, skipToken, top);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsListLogs", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<PaginatedFiles>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<PaginatedFiles>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<PaginatedFiles>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsListLogsRequestBuilder(UUID id, Integer sasValidityInSeconds, String skipToken, Integer top) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsListLogs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}/files/logs"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "sasValidityInSeconds";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sasValidityInSeconds", sasValidityInSeconds));
    localVarQueryParameterBaseName = "skipToken";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skipToken", skipToken));
    localVarQueryParameterBaseName = "top";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("top", top));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Gets a list of supported locales for endpoint creations.
   * 
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> endpointsListSupportedLocales() throws ApiException {
    ApiResponse<List<String>> localVarResponse = endpointsListSupportedLocalesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Gets a list of supported locales for endpoint creations.
   * 
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> endpointsListSupportedLocalesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsListSupportedLocalesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsListSupportedLocales", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<List<String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<String>>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsListSupportedLocalesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/locales";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Updates the metadata of the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param endpointUpdate The updated values for the endpoint. (required)
   * @return Endpoint
   * @throws ApiException if fails to make API call
   */
  public Endpoint endpointsUpdate(UUID id, EndpointUpdate endpointUpdate) throws ApiException {
    ApiResponse<Endpoint> localVarResponse = endpointsUpdateWithHttpInfo(id, endpointUpdate);
    return localVarResponse.getData();
  }

  /**
   * Updates the metadata of the endpoint identified by the given ID.
   * 
   * @param id The identifier of the endpoint. (required)
   * @param endpointUpdate The updated values for the endpoint. (required)
   * @return ApiResponse&lt;Endpoint&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Endpoint> endpointsUpdateWithHttpInfo(UUID id, EndpointUpdate endpointUpdate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = endpointsUpdateRequestBuilder(id, endpointUpdate);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("endpointsUpdate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Endpoint>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Endpoint>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Endpoint>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder endpointsUpdateRequestBuilder(UUID id, EndpointUpdate endpointUpdate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling endpointsUpdate");
    }
    // verify the required parameter 'endpointUpdate' is set
    if (endpointUpdate == null) {
      throw new ApiException(400, "Missing the required parameter 'endpointUpdate' when calling endpointsUpdate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/endpoints/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(endpointUpdate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
