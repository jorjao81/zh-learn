/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * DiarizationSpeakersProperties
 */
@JsonPropertyOrder({
  DiarizationSpeakersProperties.JSON_PROPERTY_MIN_COUNT,
  DiarizationSpeakersProperties.JSON_PROPERTY_MAX_COUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class DiarizationSpeakersProperties {
  public static final String JSON_PROPERTY_MIN_COUNT = "minCount";
  @javax.annotation.Nullable
  private Integer minCount;

  public static final String JSON_PROPERTY_MAX_COUNT = "maxCount";
  @javax.annotation.Nullable
  private Integer maxCount;

  public DiarizationSpeakersProperties() { 
  }

  public DiarizationSpeakersProperties minCount(@javax.annotation.Nullable Integer minCount) {
    this.minCount = minCount;
    return this;
  }

  /**
   * A hint for the minimum number of speakers for diarization. Must be smaller than or equal to the maxSpeakers property.
   * minimum: 1
   * @return minCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinCount() {
    return minCount;
  }


  @JsonProperty(JSON_PROPERTY_MIN_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinCount(@javax.annotation.Nullable Integer minCount) {
    this.minCount = minCount;
  }


  public DiarizationSpeakersProperties maxCount(@javax.annotation.Nullable Integer maxCount) {
    this.maxCount = maxCount;
    return this;
  }

  /**
   * The maximum number of speakers for diarization. Must be less than 36 and larger than or equal to the minSpeakers property.
   * minimum: 1
   * @return maxCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMaxCount() {
    return maxCount;
  }


  @JsonProperty(JSON_PROPERTY_MAX_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxCount(@javax.annotation.Nullable Integer maxCount) {
    this.maxCount = maxCount;
  }


  /**
   * Return true if this DiarizationSpeakersProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiarizationSpeakersProperties diarizationSpeakersProperties = (DiarizationSpeakersProperties) o;
    return Objects.equals(this.minCount, diarizationSpeakersProperties.minCount) &&
        Objects.equals(this.maxCount, diarizationSpeakersProperties.maxCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minCount, maxCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiarizationSpeakersProperties {\n");
    sb.append("    minCount: ").append(toIndentedString(minCount)).append("\n");
    sb.append("    maxCount: ").append(toIndentedString(maxCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `minCount` to the URL query string
    if (getMinCount() != null) {
      joiner.add(String.format("%sminCount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMinCount()))));
    }

    // add `maxCount` to the URL query string
    if (getMaxCount() != null) {
      joiner.add(String.format("%smaxCount%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxCount()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private DiarizationSpeakersProperties instance;

    public Builder() {
      this(new DiarizationSpeakersProperties());
    }

    protected Builder(DiarizationSpeakersProperties instance) {
      this.instance = instance;
    }

    public DiarizationSpeakersProperties.Builder minCount(Integer minCount) {
      this.instance.minCount = minCount;
      return this;
    }
    public DiarizationSpeakersProperties.Builder maxCount(Integer maxCount) {
      this.instance.maxCount = maxCount;
      return this;
    }


    /**
    * returns a built DiarizationSpeakersProperties instance.
    *
    * The builder is not reusable.
    */
    public DiarizationSpeakersProperties build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static DiarizationSpeakersProperties.Builder builder() {
    return new DiarizationSpeakersProperties.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public DiarizationSpeakersProperties.Builder toBuilder() {
    return new DiarizationSpeakersProperties.Builder()
      .minCount(getMinCount())
      .maxCount(getMaxCount());
  }

}

