/*
 * Speech Services API version 3.2
 * Speech Services API version 3.2.
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EntityReference;
import org.openapitools.client.model.LanguageIdentificationMode;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.openapitools.client.ApiClient;
/**
 * LanguageIdentificationProperties
 */
@JsonPropertyOrder({
  LanguageIdentificationProperties.JSON_PROPERTY_MODE,
  LanguageIdentificationProperties.JSON_PROPERTY_CANDIDATE_LOCALES,
  LanguageIdentificationProperties.JSON_PROPERTY_SPEECH_MODEL_MAPPING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-03T10:07:46.057250+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
public class LanguageIdentificationProperties {
  public static final String JSON_PROPERTY_MODE = "mode";
  @javax.annotation.Nullable
  private LanguageIdentificationMode mode = LanguageIdentificationMode.CONTINUOUS;

  public static final String JSON_PROPERTY_CANDIDATE_LOCALES = "candidateLocales";
  @javax.annotation.Nonnull
  private List<String> candidateLocales = new ArrayList<>();

  public static final String JSON_PROPERTY_SPEECH_MODEL_MAPPING = "speechModelMapping";
  @javax.annotation.Nullable
  private Map<String, EntityReference> speechModelMapping = new HashMap<>();

  public LanguageIdentificationProperties() { 
  }

  public LanguageIdentificationProperties mode(@javax.annotation.Nullable LanguageIdentificationMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LanguageIdentificationMode getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(@javax.annotation.Nullable LanguageIdentificationMode mode) {
    this.mode = mode;
  }


  public LanguageIdentificationProperties candidateLocales(@javax.annotation.Nonnull List<String> candidateLocales) {
    this.candidateLocales = candidateLocales;
    return this;
  }

  public LanguageIdentificationProperties addCandidateLocalesItem(String candidateLocalesItem) {
    if (this.candidateLocales == null) {
      this.candidateLocales = new ArrayList<>();
    }
    this.candidateLocales.add(candidateLocalesItem);
    return this;
  }

  /**
   * The candidate locales for language identification (example [\&quot;en-US\&quot;, \&quot;de-DE\&quot;, \&quot;es-ES\&quot;]). A minimum of 2 and a maximum of 10 candidate locales, including the main locale for the transcription, is supported for continuous mode. For single language identification, the maximum number of candidate locales is unbounded.
   * @return candidateLocales
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CANDIDATE_LOCALES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getCandidateLocales() {
    return candidateLocales;
  }


  @JsonProperty(JSON_PROPERTY_CANDIDATE_LOCALES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCandidateLocales(@javax.annotation.Nonnull List<String> candidateLocales) {
    this.candidateLocales = candidateLocales;
  }


  public LanguageIdentificationProperties speechModelMapping(@javax.annotation.Nullable Map<String, EntityReference> speechModelMapping) {
    this.speechModelMapping = speechModelMapping;
    return this;
  }

  public LanguageIdentificationProperties putSpeechModelMappingItem(String key, EntityReference speechModelMappingItem) {
    if (this.speechModelMapping == null) {
      this.speechModelMapping = new HashMap<>();
    }
    this.speechModelMapping.put(key, speechModelMappingItem);
    return this;
  }

  /**
   * An optional mapping of locales to speech model entities. If no model is given for a locale, the default base model is used.  Keys must be locales contained in the candidate locales, values are entities for models of the respective locales.
   * @return speechModelMapping
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPEECH_MODEL_MAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, EntityReference> getSpeechModelMapping() {
    return speechModelMapping;
  }


  @JsonProperty(JSON_PROPERTY_SPEECH_MODEL_MAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpeechModelMapping(@javax.annotation.Nullable Map<String, EntityReference> speechModelMapping) {
    this.speechModelMapping = speechModelMapping;
  }


  /**
   * Return true if this LanguageIdentificationProperties object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguageIdentificationProperties languageIdentificationProperties = (LanguageIdentificationProperties) o;
    return Objects.equals(this.mode, languageIdentificationProperties.mode) &&
        Objects.equals(this.candidateLocales, languageIdentificationProperties.candidateLocales) &&
        Objects.equals(this.speechModelMapping, languageIdentificationProperties.speechModelMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, candidateLocales, speechModelMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguageIdentificationProperties {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    candidateLocales: ").append(toIndentedString(candidateLocales)).append("\n");
    sb.append("    speechModelMapping: ").append(toIndentedString(speechModelMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `mode` to the URL query string
    if (getMode() != null) {
      joiner.add(String.format("%smode%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMode()))));
    }

    // add `candidateLocales` to the URL query string
    if (getCandidateLocales() != null) {
      for (int i = 0; i < getCandidateLocales().size(); i++) {
        joiner.add(String.format("%scandidateLocales%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getCandidateLocales().get(i)))));
      }
    }

    // add `speechModelMapping` to the URL query string
    if (getSpeechModelMapping() != null) {
      for (String _key : getSpeechModelMapping().keySet()) {
        if (getSpeechModelMapping().get(_key) != null) {
          joiner.add(getSpeechModelMapping().get(_key).toUrlQueryString(String.format("%sspeechModelMapping%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private LanguageIdentificationProperties instance;

    public Builder() {
      this(new LanguageIdentificationProperties());
    }

    protected Builder(LanguageIdentificationProperties instance) {
      this.instance = instance;
    }

    public LanguageIdentificationProperties.Builder mode(LanguageIdentificationMode mode) {
      this.instance.mode = mode;
      return this;
    }
    public LanguageIdentificationProperties.Builder candidateLocales(List<String> candidateLocales) {
      this.instance.candidateLocales = candidateLocales;
      return this;
    }
    public LanguageIdentificationProperties.Builder speechModelMapping(Map<String, EntityReference> speechModelMapping) {
      this.instance.speechModelMapping = speechModelMapping;
      return this;
    }


    /**
    * returns a built LanguageIdentificationProperties instance.
    *
    * The builder is not reusable.
    */
    public LanguageIdentificationProperties build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static LanguageIdentificationProperties.Builder builder() {
    return new LanguageIdentificationProperties.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public LanguageIdentificationProperties.Builder toBuilder() {
    return new LanguageIdentificationProperties.Builder()
      .mode(getMode())
      .candidateLocales(getCandidateLocales())
      .speechModelMapping(getSpeechModelMapping());
  }

}

