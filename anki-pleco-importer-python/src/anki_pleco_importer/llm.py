"""LLM-based field generators for Anki cards."""

from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any
from pydantic import BaseModel


class FieldGenerationResult(BaseModel):
    """Structured results for fields generated by an LLM."""

    structural_decomposition: Optional[str] = None
    etymology: Optional[str] = None


class FieldGenerator(ABC):
    """Interface for generating additional Anki card fields."""

    @abstractmethod
    def generate(self, chinese: str, pinyin: str) -> FieldGenerationResult:
        """Generate fields for the given Chinese text."""
        raise NotImplementedError


class GptFieldGenerator(FieldGenerator):
    """Generate fields using an OpenAI GPT model."""

    def __init__(
        self,
        model: str,
        api_key: Optional[str] = None,
        prompt_path: Optional[str] = None,
        thinking: Optional[Dict[str, Any]] = None,
    ) -> None:
        from openai import OpenAI

        self.client = OpenAI(api_key=api_key) if api_key else OpenAI()
        self.model = model
        self.thinking = thinking
        self.prompt = ""
        if prompt_path:
            with open(prompt_path, "r", encoding="utf-8") as f:
                self.prompt = f.read()

    def generate(self, chinese: str, pinyin: str) -> FieldGenerationResult:
        import json

        messages = [
            {"role": "system", "content": self.prompt},
            {
                "role": "user",
                "content": json.dumps({"character": chinese, "pinyin": pinyin}, ensure_ascii=False),
            },
        ]
        kwargs: Dict[str, Any] = {
            "model": self.model,
            "messages": messages,
            "response_format": {"type": "json_object"},
        }
        if self.thinking:
            kwargs["thinking"] = self.thinking

        response = self.client.chat.completions.create(**kwargs)
        content = response.choices[0].message.content
        data = json.loads(content)
        return FieldGenerationResult(
            structural_decomposition=data.get("structural_decomposition_html"),
            etymology=data.get("etymology_html"),
        )
